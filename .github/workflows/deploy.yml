name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  APPLICATION_NAME: full-cicd
  STACK_NAME: full-cicd-infrastructure

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --run --reporter=verbose

      - name: Build application
        run: npm run build

      # Upload build artifacts to share between jobs
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            dist/
            package.json
            package-lock.json
          retention-days: 1

  deploy-infrastructure:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      s3-bucket: ${{ steps.stack-outputs.outputs.s3-bucket }}
      application-name: ${{ steps.stack-outputs.outputs.application-name }}
      environment-name: ${{ steps.stack-outputs.outputs.environment-name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file cloudformation/infrastructure.yml \
            --stack-name ${{ env.STACK_NAME }} \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
              ApplicationName=${{ env.APPLICATION_NAME }} \
              EnvironmentName=${{ env.APPLICATION_NAME }}-prod \
              SolutionStackName="64bit Amazon Linux 2023 v6.6.3 running Node.js 22" \
            --no-fail-on-empty-changeset

      - name: Get stack outputs
        id: stack-outputs
        run: |
          S3_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`S3Bucket`].OutputValue' \
            --output text)

          APP_NAME=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApplicationName`].OutputValue' \
            --output text)

          ENV_NAME=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`EnvironmentName`].OutputValue' \
            --output text)

          echo "s3-bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "application-name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "environment-name=$ENV_NAME" >> $GITHUB_OUTPUT

  deploy-application:
    needs: [test, deploy-infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Download the build artifacts from the test job
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      # Verify the dist folder exists
      - name: Verify build files
        run: |
          echo "Checking if dist folder exists..."
          ls -la
          if [ -d "dist" ]; then
            echo "✅ dist folder found"
            echo "Contents of dist:"
            ls -la dist/
          else
            echo "❌ dist folder not found"
            echo "Available files:"
            find . -name "dist" -o -name "build" -o -name "*.js" -o -name "*.html" | head -20
            exit 1
          fi

      - name: Create deployment package for React SPA
        run: |
          echo "Creating deployment package for React SPA..."

          # Verify dist folder exists
          if [ ! -d "dist" ]; then
            echo "❌ dist folder not found!"
            ls -la
            exit 1
          fi

          # Create deployment package
          mkdir deployment-package

          # Copy React build files
          cp -r dist/* deployment-package/
          echo "✅ Copied React build files"

          # Copy package.json (needed for Node.js platform detection)
          cp package.json deployment-package/

      - name: Create server.js for SPA routing
        run: |
          cat > deployment-package/server.js << 'EOF'
          const express = require('express');
          const path = require('path');
          const app = express();
          const port = process.env.PORT || 8080;

          // Serve static files
          app.use(express.static(__dirname));

          // SPA fallback - serve index.html for all routes
          app.get('*', (req, res) => {
            res.sendFile(path.join(__dirname, 'index.html'));
          });

          app.listen(port, () => {
            console.log('Server running on port ' + port);
          });
          EOF

      - name: Update package.json
        run: |
          cd deployment-package

          # Add express to dependencies and start script
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.scripts = pkg.scripts || {};
            pkg.scripts.start = 'node server.js';
            pkg.dependencies = pkg.dependencies || {};
            if (!pkg.dependencies.express) {
              pkg.dependencies.express = '^4.18.0';
            }
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
            console.log('✅ Updated package.json');
          "

          cd ..

      - name: Create deployment zip
        run: |
          echo "✅ Deployment package structure:"
          ls -la deployment-package/

          # Create zip
          cd deployment-package
          zip -r ../deployment-package.zip .
          cd ..

          echo "✅ Package created:"
          ls -lh deployment-package.zip

      - name: Upload to S3
        run: |
          VERSION_LABEL="v${{ github.run_number }}-$(date +%Y%m%d-%H%M%S)"
          aws s3 cp deployment-package.zip s3://${{ needs.deploy-infrastructure.outputs.s3-bucket }}/${VERSION_LABEL}.zip
          echo "VERSION_LABEL=${VERSION_LABEL}" >> $GITHUB_ENV

      - name: Create application version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name ${{ needs.deploy-infrastructure.outputs.application-name }} \
            --version-label ${{ env.VERSION_LABEL }} \
            --source-bundle S3Bucket=${{ needs.deploy-infrastructure.outputs.s3-bucket }},S3Key=${{ env.VERSION_LABEL }}.zip \
            --description "Deployed from GitHub Actions - Commit: ${{ github.sha }}"

      - name: Deploy to Elastic Beanstalk
        run: |
          aws elasticbeanstalk update-environment \
            --application-name ${{ needs.deploy-infrastructure.outputs.application-name }} \
            --environment-name ${{ needs.deploy-infrastructure.outputs.environment-name }} \
            --version-label ${{ env.VERSION_LABEL }}

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          aws elasticbeanstalk wait environment-updated \
            --application-name ${{ needs.deploy-infrastructure.outputs.application-name }} \
            --environment-name ${{ needs.deploy-infrastructure.outputs.environment-name }}

      - name: Get application URL
        run: |
          URL=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApplicationURL`].OutputValue' \
            --output text)
          echo "Application deployed successfully!"
          echo "URL: $URL"
